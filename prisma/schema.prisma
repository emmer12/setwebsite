generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialActions"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @id @default(auto()) @map("_id") @db.ObjectId
    userId             String    @db.ObjectId
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    userId       String   @db.ObjectId
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
    ADMIN
    USER
    VENDOR
}

model User {
    id                String              @id @default(auto()) @map("_id") @db.ObjectId
    name              String?
    email             String?             @unique
    emailVerified     DateTime?
    image             String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    role              UserRole            @default(USER)
    accounts          Account[]
    sessions          Session[]
    password          String
    BackdropOrderItem BackdropOrderItem[]
    Vendor            Vendor[]
}

model VerificationRequest {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model BackdropCategory {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    slug        String
    description String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    Backdrops   Backdrops[]
}

model Backdrops {
    id                String              @id @default(auto()) @map("_id") @db.ObjectId
    price             Float
    title             String
    slug              String
    description       String
    stockStatus       StockStatus         @default(IN_STOCK)
    discount          Int                 @default(0)
    addOn             String[]
    imageUrl          String?
    categoryId        String              @db.ObjectId
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    category          BackdropCategory    @relation(fields: [categoryId], references: [id])
    BackdropOrderItem BackdropOrderItem[]
    filePath          String?             @default("backdrops")
}

enum StockStatus {
    IN_STOCK
    OUT_OF_STOCK
    LIMITED_QUANTITY
}

model Blog {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    slug      String
    content   String?
    imageUrl  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    eUrl      String?
}

enum PaymentStatus {
    PAID
    UNPAID
}

model BackdropOrder {
    id            String              @id @default(auto()) @map("_id") @db.ObjectId
    code          String
    paymentStatus PaymentStatus       @default(UNPAID)
    userId        String?             @db.ObjectId
    totalPrice    Float
    fullName      String
    email         String
    address       String?
    country       String
    items         BackdropOrderItem[]
}

model BackdropOrderItem {
    id         String        @id @default(auto()) @map("_id") @db.ObjectId
    orderId    String        @db.ObjectId
    price      Float
    title      String
    backdropId String        @db.ObjectId
    backdrop   Backdrops     @relation(fields: [backdropId], references: [id])
    order      BackdropOrder @relation(fields: [orderId], references: [id])
    User       User?         @relation(fields: [userId], references: [id])
    userId     String?       @db.ObjectId
}

enum TranstionType {
    BACKDROP
    DEE_DEGITAL
}

model transactionLog {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    transactionId String
    orderId       String        @db.ObjectId
    type          TranstionType
    description   String
}

model Vendor {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    userId          String    @db.ObjectId
    company_name    String
    overview        String
    website         String?
    services        String
    phone           String
    image_1_path    String
    image_2_path    String?
    video_path      String?
    socials         String?
    quote_sub       Boolean   @default(false)
    profile_sub     Boolean   @default(false)
    quote_sub_exp   DateTime?
    profile_sub_exp DateTime?
    user            User      @relation(fields: [userId], references: [id])
}
