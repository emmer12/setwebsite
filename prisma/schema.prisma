generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                 String    @id @default(auto()) @map("_id") @db.ObjectId
    userId             String    @db.ObjectId
    providerType       String
    providerId         String
    providerAccountId  String
    refreshToken       String?
    accessToken        String?
    accessTokenExpires DateTime?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    user               User      @relation(fields: [userId], references: [id])

    @@unique([providerId, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    userId       String   @db.ObjectId
    expires      DateTime
    sessionToken String   @unique
    accessToken  String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
    ADMIN
    USER
    VENDOR
}

enum ApprovalStatus {
    Pending
    Approved
    Disapproved
}

model User {
    id                String              @id @default(auto()) @map("_id") @db.ObjectId
    name              String?
    email             String?             @unique
    emailVerified     DateTime?
    image             String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    role              UserRole            @default(USER)
    accounts          Account[]
    sessions          Session[]
    password          String
    Vendor            Vendor[]
    BackdropOrderItem BackdropOrderItem[]
    Subscription      Subscription[]
    Requests          Requests[]
    BackdropOrder     BackdropOrder[]
    Quote             Quote[]
    Notification      Notification[]
    ai_points         Float               @default(10)
    saf_points        Float               @default(10)
    sentMessages      Message[]           @relation("sender")
    receivedMessages  Message[]           @relation("receiver")

    Message              Message[]
    Conversation         Conversation[]
    receiverConversation Conversation[] @relation("c_receiver")
}

model VerificationRequest {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model BackdropCategory {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    slug        String
    description String?
    icon        String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    Backdrops   Backdrops[]
}

model VendorCategory {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    slug        String
    description String?
    hasServices Boolean? @default(false)
    parent_id   String?  @db.ObjectId
    services    String[] @default([])
    icon        String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Vendor      Vendor[]
}

model Backdrops {
    id                String              @id @default(auto()) @map("_id") @db.ObjectId
    personal_price    Float
    commercial_price  Float
    title             String
    slug              String
    description       String
    stockStatus       StockStatus         @default(IN_STOCK)
    discount          Int                 @default(0)
    addOn             String[]
    imageUrl          String?
    categoryId        String              @db.ObjectId
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    category          BackdropCategory?   @relation(fields: [categoryId], references: [id])
    BackdropOrderItem BackdropOrderItem[]
    filePath          String?             @default("backdrops")
    filePath2         String?             @default("backdrops")
}

enum StockStatus {
    IN_STOCK
    OUT_OF_STOCK
    LIMITED_QUANTITY
}

model Blog {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    slug      String
    content   String?
    imageUrl  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    eUrl      String?
}

enum PaymentStatus {
    PAID
    UNPAID
}

model BackdropOrder {
    id            String              @id @default(auto()) @map("_id") @db.ObjectId
    code          String
    paymentStatus PaymentStatus       @default(UNPAID)
    userId        String?             @db.ObjectId
    totalPrice    Float
    fullName      String
    email         String
    address       String?
    country       String
    items         BackdropOrderItem[]
    Requests      Requests[]
    ep_quote      Boolean             @default(false)
    bp_quote      Boolean             @default(false)
    User          User?               @relation(fields: [userId], references: [id])
    Quote         Quote[]
}

enum License {
    COMMERCIAL
    PERSONAL
}

model BackdropOrderItem {
    id         String        @id @default(auto()) @map("_id") @db.ObjectId
    orderId    String        @db.ObjectId
    price      Float
    title      String
    backdropId String        @db.ObjectId
    license    License?      @default(PERSONAL)
    backdrop   Backdrops     @relation(fields: [backdropId], references: [id])
    order      BackdropOrder @relation(fields: [orderId], references: [id])
    User       User?         @relation(fields: [userId], references: [id])
    userId     String?       @db.ObjectId
}

enum TranstionType {
    BACKDROP
    DEE_DIGITAL
    SAF
    VENDOR
    AI_TOP_UP
    SAF_TOP_UP
}

model transactionLog {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    transactionId String
    orderId       String        @db.ObjectId
    type          TranstionType
    description   String
    amount        Float?
}

model Vendor {
    id                  String          @id @default(auto()) @map("_id") @db.ObjectId
    userId              String          @db.ObjectId
    company_name        String
    company_overview    String
    website             String?
    services            String[]        @default([])
    company_email       String
    company_location    String
    video_path          String?
    socials             String?
    country             String
    city                String?
    license_number      String?
    coverage_cities     String
    whatsapp_number     String?
    office_number       String
    instagram           String?
    quote_sub           Boolean         @default(false)
    profile_sub         Boolean         @default(false)
    quote_sub_exp       DateTime?
    profile_sub_exp     DateTime?
    user                User            @relation(fields: [userId], references: [id])
    VendorCategory      VendorCategory? @relation(fields: [vendorCategoryId], references: [id])
    vendorCategoryId    String?         @db.ObjectId
    vendorSubCategoryId String?         @db.ObjectId
    approval_status     ApprovalStatus  @default(Pending)
    legal_disclaimer    String?
    Requests            Requests?       @relation(fields: [requestsId], references: [id])
    requestsId          String?         @db.ObjectId
    createdAt           DateTime        @default(now())
    updatedAt           DateTime        @updatedAt
    VendorImage         VendorImage[]
}

enum RequestType {
    EVENT_PLANNING
    BACKDROP_PRODUCTION
}

model Requests {
    id                 String         @id @default(auto()) @map("_id") @db.ObjectId
    title              String?
    description        String?
    request_type       RequestType?
    categoryId         String         @db.ObjectId
    subCategoryId      String?        @db.ObjectId
    services           String[]       @default([])
    orderId            String?        @db.ObjectId
    order              BackdropOrder? @relation(fields: [orderId], references: [id])
    people_number      Int?
    event_date         String?
    occasion           String?
    location           String?
    additional_request String?
    imageUrl           String?
    docUrl             String?
    userId             String         @db.ObjectId
    user               User           @relation(fields: [userId], references: [id])
    vendorsIds         Vendor[]
    deadline           DateTime?
    Quote              Quote[]
    createdAt          DateTime       @default(now())
    updatedAt          DateTime       @updatedAt
}

enum SubType {
    SAF_BASIC
    SAF_PRO
    DEE_AI_BASIC
    DEE_AI_PRO
    VENDOR_BASIC
    VENDOR_PRO
}

model Subscription {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    userId        String        @db.ObjectId
    city          String?
    state         String?
    zip           String?
    service       SubType
    description   String?
    paymentStatus PaymentStatus @default(UNPAID)
    price         Float
    start_date    DateTime?
    end_date      DateTime?
    user          User          @relation(fields: [userId], references: [id])
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model Quote {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    userId          String         @db.ObjectId
    requestId       String         @db.ObjectId
    request         Requests?      @relation(fields: [requestId], references: [id])
    user            User           @relation(fields: [userId], references: [id])
    description     String?
    amount          String
    attachmentUrl   String?
    backdropOrderId String?        @db.ObjectId
    BackdropOrder   BackdropOrder? @relation(fields: [backdropOrderId], references: [id])
    expiredAt       DateTime?
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
}

model Notification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    isRead    Boolean  @default(false)
    title     String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PasswordResetToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String
    token     String   @unique
    createdAt DateTime @default(now())
    expiresAt DateTime
}

model Conversation {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    name       String?
    senderId   String
    receiverId String?   @db.ObjectId
    messages   Message[]
    createdAt  DateTime  @default(now())
    Receiver   User?     @relation(name: "c_receiver", fields: [receiverId], references: [id])
    User       User?     @relation(fields: [userId], references: [id])
    userId     String?   @db.ObjectId
}

model Message {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    text           String?
    fileUrl        String?
    senderId       String       @db.ObjectId
    sender         User         @relation(name: "sender", fields: [senderId], references: [id])
    receiverId     String       @db.ObjectId
    receiver       User         @relation(name: "receiver", fields: [receiverId], references: [id])
    conversationId String       @db.ObjectId
    read           Boolean      @default(false)
    conversation   Conversation @relation(fields: [conversationId], references: [id])
    User           User?        @relation(fields: [userId], references: [id])
    userId         String?      @db.ObjectId
    createdAt      DateTime     @default(now())
}

model VendorImage {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    url      String
    filename String
    vendorId String @db.ObjectId
    vendor   Vendor @relation(fields: [vendorId], references: [id])
}
